{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 167, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/patel/Downloads/temp/tradinglocal/jsprolocal/src/app/api/finnhub/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\r\nimport finnhub from 'finnhub';\r\n\r\nconst api_key = process.env.NEXT_PUBLIC_FINNHUB_API_KEY || 'd29vq3pr01qvhsfveaj0d29vq3pr01qvhsfveajg';\r\nconst finnhubClient = new finnhub.DefaultApi({ apiKey: api_key });\r\n\r\nexport async function GET(request: NextRequest) {\r\n  const { searchParams } = new URL(request.url);\r\n  const action = searchParams.get('action');\r\n  const symbol = searchParams.get('symbol');\r\n  const query = searchParams.get('query');\r\n  const resolution = searchParams.get('resolution') || 'D';\r\n  const from = searchParams.get('from');\r\n  const to = searchParams.get('to');\r\n\r\n  try {\r\n    switch (action) {\r\n      case 'quote':\r\n        if (!symbol) {\r\n          return NextResponse.json({ error: 'Symbol is required' }, { status: 400 });\r\n        }\r\n        const quote = await finnhubClient.quote(symbol);\r\n        // Convert to plain object to ensure JSON serialization\r\n        const quoteData = {\r\n          c: quote.c,\r\n          d: quote.d,\r\n          dp: quote.dp,\r\n          h: quote.h,\r\n          l: quote.l,\r\n          o: quote.o,\r\n          pc: quote.pc,\r\n          t: quote.t,\r\n          v: quote.v || 0\r\n        };\r\n        return NextResponse.json(quoteData);\r\n\r\n      case 'candles':\r\n        if (!symbol || !from || !to) {\r\n          return NextResponse.json({ error: 'Symbol, from, and to are required' }, { status: 400 });\r\n        }\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        const candles = await finnhubClient.stockCandles(symbol, resolution as any, parseInt(from), parseInt(to));\r\n        // Convert to plain object\r\n        const candlesData = {\r\n          c: candles.c || [],\r\n          h: candles.h || [],\r\n          l: candles.l || [],\r\n          o: candles.o || [],\r\n          s: candles.s || 'no_data',\r\n          t: candles.t || [],\r\n          v: candles.v || []\r\n        };\r\n        return NextResponse.json(candlesData);\r\n\r\n      case 'profile':\r\n        if (!symbol) {\r\n          return NextResponse.json({ error: 'Symbol is required' }, { status: 400 });\r\n        }\r\n        const profile = await finnhubClient.companyProfile2({ symbol });\r\n        // Convert to plain object\r\n        const profileData = {\r\n          country: profile.country || '',\r\n          currency: profile.currency || '',\r\n          exchange: profile.exchange || '',\r\n          ipo: profile.ipo || '',\r\n          marketCapitalization: profile.marketCapitalization || 0,\r\n          name: profile.name || '',\r\n          phone: profile.phone || '',\r\n          shareOutstanding: profile.shareOutstanding || 0,\r\n          ticker: profile.ticker || '',\r\n          weburl: profile.weburl || '',\r\n          logo: profile.logo || '',\r\n          finnhubIndustry: profile.finnhubIndustry || ''\r\n        };\r\n        return NextResponse.json(profileData);\r\n\r\n      case 'search':\r\n        if (!query) {\r\n          return NextResponse.json({ error: 'Query is required' }, { status: 400 });\r\n        }\r\n        const searchResults = await finnhubClient.symbolSearch(query);\r\n        // Convert to plain object\r\n        const searchData = {\r\n          result: (searchResults.result || []).map((item: any) => ({\r\n            symbol: item.symbol || '',\r\n            description: item.description || '',\r\n            primaryExchange: item.primaryExchange || '',\r\n            type: item.type || ''\r\n          }))\r\n        };\r\n        return NextResponse.json(searchData);\r\n\r\n      case 'news':\r\n        const news = await finnhubClient.companyNews('', '2024-01-01', '2024-12-31');\r\n        // Convert to plain objects\r\n        const newsData = (news || []).slice(0, 10).map((item: any) => ({\r\n          category: item.category || '',\r\n          datetime: item.datetime || 0,\r\n          headline: item.headline || '',\r\n          id: item.id || 0,\r\n          image: item.image || '',\r\n          related: item.related || '',\r\n          source: item.source || '',\r\n          summary: item.summary || '',\r\n          url: item.url || ''\r\n        }));\r\n        return NextResponse.json(newsData);\r\n\r\n      default:\r\n        return NextResponse.json({ error: 'Invalid action' }, { status: 400 });\r\n    }\r\n  } catch (error) {\r\n    console.error('Finnhub API error:', error);\r\n    return NextResponse.json({ error: 'Failed to fetch data' }, { status: 500 });\r\n  }\r\n} "],"names":[],"mappings":"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"}},
    {"offset": {"line": 308, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}